import { useState, useEffect, useRef } from "react";

export default function Facts() {
  const [usersCount, setUsersCount] = useState(0);
  const [revenueCount, setRevenueCount] = useState(0);
  const [engagementCount, setEngagementCount] = useState(0);
  const [uptimeCount, setUptimeCount] = useState(0);

  // Ref for the Facts section
  const factsRef = useRef(null);

  // Target values for the counts
  const targetUsers = 5400000; // 5.4M
  const targetRevenue = 80000; // $80K
  const targetEngagement = 100000; // 100K
  const targetUptime = 99.9; // 99.9%

  // Duration of the counting animation in milliseconds
  const animationDuration = 2000; // 2 seconds
  const intervalDuration = 20; // Update every 20ms

  // Function to start the counting animation
  const startCounting = () => {
    // Reset counts to 0
    setUsersCount(0);
    setRevenueCount(0);
    setEngagementCount(0);
    setUptimeCount(0);

    // Function to increment the count
    const incrementCount = (setCount, target, duration) => {
      const increment = target / (duration / intervalDuration);
      let currentCount = 0;

      const timer = setInterval(() => {
        currentCount += increment;
        if (currentCount >= target) {
          setCount(target);
          clearInterval(timer);
        } else {
          setCount(Math.floor(currentCount));
        }
      }, intervalDuration);

      return timer;
    };

    // Start counting animations
    incrementCount(setUsersCount, targetUsers, animationDuration);
    incrementCount(setRevenueCount, targetRevenue, animationDuration);
    incrementCount(setEngagementCount, targetEngagement, animationDuration);
    incrementCount(setUptimeCount, targetUptime, animationDuration);
  };

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // Start the counting animation whenever the section is visible
            startCounting();
          }
        });
      },
      { threshold: 0.8 } // Trigger when 80% of the section is visible
    );

    // Observe the Facts section
    if (factsRef.current) {
      observer.observe(factsRef.current);
    }

    // Cleanup observer on component unmount
    return () => {
      if (factsRef.current) {
        observer.unobserve(factsRef.current);
      }
    };
  }, []);

  return (
    <div
      ref={factsRef}
      className="p-8 min-h-[350px] flex flex-col items-center justify-center font-sans"
    >
      <h2 className="text-gray-800 text-3xl font-bold mb-16 text-center">
        Application Metrics
      </h2>
      <div className="grid lg:grid-cols-4 sm:grid-cols-2 gap-6 max-lg:gap-12">
        {/* Total Users */}
        <div className="text-center">
          <h3 className="text-gray-800 text-4xl font-extrabold">
            {(usersCount / 1000000).toFixed(1)}
            <span className="text-[#F79F35]">M+</span>
          </h3>
          <p className="text-base font-bold mt-4">Total Users</p>
          <p className="text-sm text-gray-500 mt-2">
            The total number of registered users on the platform.
          </p>
        </div>

        {/* Revenue */}
        <div className="text-center">
          <h3 className="text-gray-800 text-4xl font-extrabold">
            ${(revenueCount / 1000).toFixed(0)}
            <span className="text-[#F79F35]">K</span>
          </h3>
          <p className="text-base font-bold mt-4">Revenue</p>
          <p className="text-sm text-gray-500 mt-2">
            The total revenue generated by the application.
          </p>
        </div>

        {/* Engagement */}
        <div className="text-center">
          <h3 className="text-gray-800 text-4xl font-extrabold">
            {(engagementCount / 1000).toFixed(0)}
            <span className="text-[#F79F35]">K</span>
          </h3>
          <p className="text-base font-bold mt-4">Engagement</p>
          <p className="text-sm text-gray-500 mt-2">
            The level of user engagement with the applications content and
            features.
          </p>
        </div>

        {/* Server Uptime */}
        <div className="text-center">
          <h3 className="text-gray-800 text-4xl font-extrabold">
            {uptimeCount.toFixed(1)}
            <span className="text-[#F79F35]">%</span>
          </h3>
          <p className="text-base font-bold mt-4">Server Uptime</p>
          <p className="text-sm text-gray-500 mt-2">
            The percentage of time the server has been operational and
            available.
          </p>
        </div>
      </div>
    </div>
  );
}
